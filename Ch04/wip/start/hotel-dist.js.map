{"version":3,"sources":["hotel.js"],"names":["PostForm","props","typeOptions","Object","keys","messageTypes","map","key","hasOwnProperty","defaultType","state","messageText","messageType","handleTextChange","bind","handleTypeChange","postStatusUpdate","evt","setState","target","value","preventDefault","newStatus","msg","type","time","date","format","Date","axios","post","apiUrl","then","response","data","success","id","addStatusMessage","React","Component","StatusMessage","statusDate","parse","dateFormat","StatusMessageList","statuses","status","isLoaded","displayStatusMessages","StatusMessageManager","management","dining","ops","plumbing","pool","retrieveStatusMessages","get","updatedStatuses","slice","push","ReactDOM","render","document","getElementById"],"mappings":"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","sourcesContent":["class PostForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Type options are an object; convert to an array and map\n    this.typeOptions = Object.keys(props.messageTypes).map(function(key) {\n      if (props.messageTypes.hasOwnProperty(key)) {\n        return (\n          <option key={key} value={key}>\n            {props.messageTypes[key]}\n          </option>\n        );\n      }\n    });\n\n    // so we don't have to type this over and over\n    this.defaultType = this.typeOptions[0].key;\n\n    this.state = {\n      messageText: \"\",\n      messageType: this.defaultType\n    }\n\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.handleTypeChange = this.handleTypeChange.bind(this);\n    this.postStatusUpdate = this.postStatusUpdate.bind(this);\n  }\n\n  handleTextChange(evt){\n    this.setState({\n      messageText: evt.target.value\n    })\n  }\n  handleTypeChange(evt){\n    this.setState({\n      messageType: evt.target.value\n    })\n  }\n\n  postStatusUpdate(evt){\n    evt.preventDefault();\n\n    var newStatus = {\n      msg: this.state.messageText,\n      type: this.state.messageType,\n      time: date.format(new Date(), \"YYYY-MM-DD, HH:mm\")\n    };\n\n    axios.post(this.props.apiUrl + \"/post.php\", newStatus).then(\n      function(response) {        \n        if (response.data.success) {\n          this.setState({\n            messageText: \"\",\n            messageType: this.defaultType\n          })\n        }\n        newStatus.id= response.data.id;\n        this.props.addStatusMessage(newStatus);\n      }.bind(this)\n    );\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.postStatusUpdate}>\n        <h3>Post an Update</h3>\n\n        <div className=\"field-group\">\n          <label htmlFor=\"txt-message\">Message</label>\n          <textarea id=\"txt-message\" rows=\"2\" onChange={this.handleTextChange} value={this.state.messageText}/>\n        </div>\n\n        <div className=\"field-group\">\n          <label htmlFor=\"txt-type\">Type</label>\n          <select id=\"txt-type\" onChange={this.handleTypeChange} value={this.state.messageType}>{this.typeOptions}</select>\n        </div>\n\n        <div className=\"field-group action\">\n          <input type=\"submit\" value=\"Post Update\" />\n        </div>\n      </form>\n    );\n  }\n}\n\nfunction StatusMessage(props) {\n  var statusDate = date.parse(props.time, \"YYYY-MM-DD, HH:mm\"),\n    dateFormat = \"M/D/Y, h:mm A\";\n\n  return (\n    <div className=\"status-message\">\n      {props.msg}\n      <span className=\"name\">— {props.type}</span>\n      <span className=\"time\">{date.format(statusDate, dateFormat)}</span>\n    </div>\n  );\n}\n\nclass StatusMessageList extends React.Component {\n  constructor(props) {\n    super(props);\n\n  }\n\n  componentDidMount(){\n    //this.retrieveStatusMessages();\n  }\n\n\n  displayStatusMessages() {\n    return this.props.statuses.map(\n      function(status) {\n        return (\n          <li key={status.id}>\n            <StatusMessage\n              msg={status.msg}\n              type={this.props.messageTypes[status.type]}\n              time={status.time}\n            />\n          </li>\n        );\n      }.bind(this)\n    );\n  }\n\n  render() {\n    if(this.props.isLoaded){\n      return <ul id=\"status-list\">{this.displayStatusMessages()}</ul>;\n    }else{\n      return (\n        <div id=\"status-list\" className=\"loading\">\n          Loading...\n          <div className=\"spinner\">\n            <div className=\"bounce1\" />\n            <div className=\"bounce2\" />\n            <div className=\"bounce3\" />\n          </div>\n        </div>\n      );      \n    }\n  }\n}\n\nclass StatusMessageManager extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // just a property, doesn't have to be state\n    this.messageTypes = {\n      management: \"Management\",\n      dining: \"Dining Services\",\n      ops: \"Operations\",\n      plumbing: \"Plumbing\",\n      pool: \"Pool\"\n    };\n\n    this.apiUrl = \"http://localhost/reactjs/status_api\";\n\n      this.state = {\n        statuses: [],\n        isLoaded: false  \n    };\n\n    this.addStatusMessage = this.addStatusMessage.bind(this);\n  }\n\n  componentDidMount(){\n    this.retrieveStatusMessages();\n  }\n\n  retrieveStatusMessages(){\n    axios.get(this.apiUrl+'/get.php?delay=2').then(function(response){\n      this.setState({\n        statuses: response.data,\n        isLoaded: true\n      });\n    }.bind(this));\n  }\n\n  addStatusMessage(status) {\n    var updatedStatuses = this.state.statuses.slice(0);\n\n    updatedStatuses.push(status);\n\n    this.setState({\n      statuses: updatedStatuses\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div id=\"post-status\">\n          <PostForm messageTypes={this.messageTypes} apiUrl={this.apiUrl} addStatusMessage={this.addStatusMessage}/>\n        </div>\n        <StatusMessageList messageTypes={this.messageTypes} apiUrl={this.apiUrl} statuses={this.state.statuses}\n        isLoaded={this.state.statuses}/>\n      </React.Fragment>\n    );\n  }\n}\n\nReactDOM.render(<StatusMessageManager />, document.getElementById(\"react-statusmanager\"));\n"]}